/**
 * A <code>ShapeHolder</code> class 
 * @author JosephSalerno
 * @author BrendanOlski
 * @author MitchellThomas
 * Class: ShapeHolder.java
 * Project: 4
 */

package shapes;

import java.lang.reflect.Array;
import java.util.Iterator;

public class ShapeHolder implements Iterator<AllShapes>{

    private static ShapeHolder instance;
    private AllShapes []shapes = new AllShapes[50];
    private int index;
    
    public static ShapeHolder getInstance(){
       if (instance == null) {
         instance = new ShapeHolder();
       }
       return instance
    }
    
    public void addShape(String name) {
        int i = index++;
        shapes[i] = new AllShapes(i,name);
   }
   
   public AllShapes[] getShapes() {
        return shapes;
   }

}



public class ShapeHolderIterator implements Iterator<AllShapes>{
   
   private AllShapes [] shapes;
   int pos;
   
   // initialize pointer to head of the list for iteration 
   public ShapeIterator(AllShapes []shapes){
        this.shapes = shapes;
   }
   
   // Checks if the next element exists
   @Override
   public boolean hasNext() {
        if(pos >= shapes.length || shapes[pos] == null) {
            return false;
            }
        return true;
   }

   // moves the cursor/iterator to next element
   @Override
   public AllShapes next() {
        return shapes[pos++];
   }
}  
